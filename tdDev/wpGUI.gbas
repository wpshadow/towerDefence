// --------------------------------- //
// Project: tdDev
// Start: Tuesday, November 22, 2016
// IDE Version: 14.371

// --------------------------------- //
// wpGUI
// v 0.0.1a
// --------------------------------- //

TYPE wpGUI_position_TYPE
	x
	y
ENDTYPE

TYPE wpGUI_size_TYPE
	width
	height
ENDTYPE

TYPE wpGUI_button_TYPE
	text$
	textAlignment
	position AS wpGUI_position_TYPE
	size AS wpGUI_size_TYPE
	returnCode$

	mouseOverOffset
ENDTYPE

TYPE wpGUI_mouse_TYPE
	position AS wpGUI_position_TYPE
	buttonLeft
	buttonRight
	buttonLeft_press
	buttonRight_press
ENDTYPE

TYPE wpGUI_TYPE

	typ
	button AS wpGUI_button_TYPE

ENDTYPE

GLOBAL wpGUI[] AS wpGUI_TYPE, wpGUI_mouse AS wpGUI_mouse_TYPE

FUNCTION wpGUI_update:
LOCAL guiIndex

	wpGUI_initial()
	
	X_MAKE2D

	FOREACH gui IN wpGUI[]
		SELECT gui.typ
		CASE 1
			wpGUI_drawButton(guiIndex)
		CASE 2

		CASE 3

		ENDSELECT

		INC guiIndex, 1
	NEXT

ENDFUNCTION

FUNCTION wpGUI_initial:

ENDFUNCTION

FUNCTION wpGUI_setMouseInfos: positionX, positionY, buttonLeft, buttonRight, buttonLeft_press, buttonRight_press

	wpGUI_mouse.position.x = 		positionX
	wpGUI_mouse.position.y = 		positionY
	wpGUI_mouse.buttonLeft = 		buttonLeft
	wpGUI_mouse.buttonRight = 		buttonRight
	wpGUI_mouse.buttonLeft_press =	buttonLeft_press
	wpGUI_mouse.buttonRight_press = buttonRight_press

ENDFUNCTION

FUNCTION wpGUI_addButton: text$, positionX, positionY, sizeX, sizeY, textAlignment = 0
LOCAL g AS wpGUI_TYPE

	g.typ =						1
	g.button.text$ = 			text$
	g.button.position.x =		positionX
	g.button.position.y =		positionY
	g.button.size.width =		sizeX
	g.button.size.height =		sizeY
	g.button.textAlignment =	textAlignment

	DIMPUSH wpGUI[], g

ENDFUNCTION

FUNCTION wpGUI_drawButton: guiIndex
LOCAL positionX, positionY, width, height

	positionX =		wpGUI[guiIndex].button.position.x + 10 - wpGUI[guiIndex].button.mouseOverOffset
	positionY =		wpGUI[guiIndex].button.position.y
	width =			wpGUI[guiIndex].button.size.width - 20 + (wpGUI[guiIndex].button.mouseOverOffset * 2)
	height =		wpGUI[guiIndex].button.size.height

	

	IF wpGUI_mouse.position.x >= positionX AND wpGUI_mouse.position.x <= positionX + width AND wpGUI_mouse.position.y >= positionY AND wpGUI_mouse.position.y <= positionY + height
		
		INC wpGUI[guiIndex].button.mouseOverOffset, 0.1 * GETTIMER()
		IF wpGUI[guiIndex].button.mouseOverOffset > 10 THEN wpGUI[guiIndex].button.mouseOverOffset = 10
		
		IF wpGUI_mouse.buttonLeft_press = TRUE
			wpGUI_drawRRect(positionX, positionY, width, height, 1, 2)
		ELSE
			wpGUI_drawRRect(positionX, positionY, width, height, 1, 1)
		ENDIF
	ELSE
		DEC wpGUI[guiIndex].button.mouseOverOffset, 0.1 * GETTIMER()
		IF wpGUI[guiIndex].button.mouseOverOffset < 0 THEN wpGUI[guiIndex].button.mouseOverOffset = 0
		
		wpGUI_drawRRect(positionX, positionY, width, height, 1, 0)
	ENDIF

	//DRAWRECT wpGUI[guiIndex].button.position.x, wpGUI[guiIndex].button.position.y, wpGUI[guiIndex].button.size.width, wpGUI[guiIndex].button.size.height, RGB(255, 255, 255)

ENDFUNCTION

FUNCTION wpGUI_drawRRect: x, y, length, width, typ, mouseinfo
LOCAL colorR, colorG, colorB
// typ =	Art des Elementes
// info =	Mouseover/Mousepress Information

	SELECT mouseinfo
	// No Mouseover
	CASE 0
		colorR = 60
		colorG = 125
		colorB = 139
	// Mouseover
	CASE 1
		colorR = INTEGER(60 * 1.25)
		colorG = INTEGER(125 * 1.25)
		colorB = INTEGER(139 * 1.25)
	// Mouse Press
	CASE 2
		colorR = INTEGER(60 * 1.5)
		colorG = INTEGER(125 * 1.5)
		colorB = INTEGER(139 * 1.5)
	ENDSELECT
	
	IF colorR > 255 THEN colorR = 255
	IF colorG > 255 THEN colorG = 255
	IF colorB > 255 THEN colorB = 255

	wpGUI_RoundRectBorder(x, y, length, width, 4, 4, RGB(colorR, colorG, colorB), RGB(colorR, colorG, colorB), 0)
ENDFUNCTION

FUNCTION wpGUI_RoundRectBorder: x,y,w,h,r,border,col, col_border, shadow_offset
        IF shadow_offset
                ALPHAMODE -.5
                wpGUI_RoundRect(x+shadow_offset,y+shadow_offset,w,h,r,RGB(0,0,0))
        ENDIF
        ALPHAMODE 0
        wpGUI_RoundRect(x,y,w,h,r,col_border)
        wpGUI_RoundRect(x+border,y+border, w-2*border, h-2*border, r-border, col)
ENDFUNCTION



FUNCTION wpGUI_RoundRect: x,y,w,h,r,col
        // polyvector way of doing it:
        STARTPOLY -1
        wpGUI_RRCircle(x+r,  y+r,    90,180, r,col)
        wpGUI_RRCircle(x+r,  y+h-r, 180,270, r,col)
        wpGUI_RRCircle(x+w-r,y+h-r, 270,360, r,col)
        wpGUI_RRCircle(x+w-r,y+r,   360,450, r,col)

        ENDPOLY
ENDFUNCTION

FUNCTION wpGUI_RRCircle: x,y,phi1, phi2, r, col
LOCAL p
        FOR p=phi1 TO phi2+0.00001 STEP (phi2-phi1)/16
                POLYVECTOR x+COS(p)*r, y-SIN(p)*r, 0,0,col
        NEXT
ENDFUNCTION
