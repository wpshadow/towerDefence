// --------------------------------- //
// Project: tdDev
// Start: Tuesday, November 22, 2016
// IDE Version: 14.371

// --------------------------------- //
// wpGUI
// v 0.0.1a
// --------------------------------- //

TYPE wpGUI_position_TYPE
	x
	y
ENDTYPE

TYPE wpGUI_size_TYPE
	width
	height
ENDTYPE

TYPE wpGUI_background_TYPE
	position AS	wpGUI_position_TYPE
	size AS 	wpGUI_size_TYPE
ENDTYPE

TYPE wpGUI_button_TYPE
	text$
	textAlignment
	textPosition AS wpGUI_position_TYPE
	font
	position AS 	wpGUI_position_TYPE
	size AS 		wpGUI_size_TYPE
	returnCode$

	mouseOverOffset
ENDTYPE

TYPE wpGUI_label_TYPE
	text$
	textAlignment
	font
	position AS wpGUI_position_TYPE
	textPosition AS wpGUI_position_TYPE
	size AS wpGUI_size_TYPE

ENDTYPE

TYPE wpGUI_radio_TYPE
	text$
	textAlignment
	textPosition AS wpGUI_position_TYPE
	position AS 	wpGUI_position_TYPE
	size AS 		wpGUI_size_TYPE
	groupID
	activeID
	autoCounter
ENDTYPE

TYPE wpGUI_radioHelper_TYPE
	groupID
	activeID
	groupCounter
ENDTYPE

TYPE wpGUI_cuttingLine_TYPE
	active
	position AS wpGUI_position_TYPE
	size AS		wpGUI_size_TYPE
ENDTYPE

TYPE wpGUI_mouse_TYPE
	position AS wpGUI_position_TYPE
	buttonLeft
	buttonRight
	buttonLeft_press
	buttonRight_press
ENDTYPE

TYPE wpGUI_TYPE

	typ
	name$
	active
	background AS 	wpGUI_background_TYPE
	button AS 		wpGUI_button_TYPE
	label AS 		wpGUI_label_TYPE
	radio AS 		wpGUI_radio_TYPE
	cuttingLine AS	wpGUI_cuttingLine_TYPE

ENDTYPE

TYPE wpGUI_settings_TYPE
	initialized

	animationSpeed
	animationSpeedButton


	animationGlobal

	animationButton
	animationButtonDistance

	returnCode$

ENDTYPE

TYPE wpGUI_colorBasic_TYPE
	r
	g
	b
ENDTYPE

TYPE wpGUI_color_TYPE
	buttonInactive AS		wpGUI_colorBasic_TYPE
	buttonActive AS			wpGUI_colorBasic_TYPE
	buttonPress AS 			wpGUI_colorBasic_TYPE
	label AS				wpGUI_colorBasic_TYPE
	background AS			wpGUI_colorBasic_TYPE
	radioInactive AS		wpGUI_colorBasic_TYPE
	radioActive AS			wpGUI_colorBasic_TYPE
	radioPress AS 			wpGUI_colorBasic_TYPE
	cuttingLine AS			wpGUI_colorBasic_TYPE
ENDTYPE

TYPE wpGUI_font_TYPE
	id
ENDTYPE

GLOBAL wpGUI[] AS wpGUI_TYPE, wpGUI_mouse AS wpGUI_mouse_TYPE, wpGUI_settings AS wpGUI_settings_TYPE, wpGUI_color AS wpGUI_color_TYPE, wpGUI_font AS wpGUI_font_TYPE, wpGUI_radioHelper[] AS wpGUI_radioHelper_TYPE

FUNCTION wpGUI_update:
LOCAL guiIndex

	wpGUI_check_init()

	X_MAKE2D

	wpGUI_settings.returnCode$ = "NULL"

	FOREACH gui IN wpGUI[]
		IF gui.typ = 0
			wpGUI_drawBackground(guiIndex)
		ENDIF
	NEXT


	FOREACH gui IN wpGUI[]
		SELECT gui.typ
		CASE 1
			wpGUI_drawButton(guiIndex)
		CASE 2
			wpGUI_drawLabel(guiIndex)
		CASE 3
			wpGUI_drawRadio(guiIndex)
		CASE 4
			wpGUI_drawCuttingLine(guiIndex)
		ENDSELECT

		INC guiIndex, 1
	NEXT

ENDFUNCTION

FUNCTION wpGUI_check_init:

	IF wpGUI_settings.initialized = FALSE
		wpGUI_initial()
		wpGUI_settings.initialized = TRUE
	ENDIF

ENDFUNCTION

FUNCTION wpGUI_initial:

		wpGUI_settings.animationGlobal = TRUE
		
		wpGUI_setAnimationSpeedSettings()

		wpGUI_setInitialColor()

		wpGUI_loader()

		wpGUI_setAnimationSettings()

ENDFUNCTION

FUNCTION wpGUI_loader:
LOCAL folderFound, fileFound
LOCAL animGlobal, animSpeed, animButton, animButtonSpeed, animDistanceButton

	folderFound  = DOESDIREXIST("wpGUI/initial")

	IF folderFound = TRUE

		fileFound = DOESFILEEXIST("wpGUI/initial/wpGUIinit.ini")

		//IF fileFound = FALSE THEN END

		IF fileFound = TRUE

			INIOPEN "wpGUI/initial/wpGUIinit.ini"

				// ===
				animGlobal = INIGET$("animation", "animationGlobal")

				IF animGlobal = 0 OR animGlobal = 1
					wpGUI_settings.animationGlobal = INIGET$("animation", "animationGlobal")
				ENDIF

				// ===
				animSpeed = INIGET$("animation", "animationGlobalTimer")

				IF animSpeed >= 0 AND animSpeed <= 10
					wpGUI_settings.animationSpeed =	INIGET$("animation", "animationGlobalTimer")
				ENDIF

				// ===
				animButton = INIGET$("animation", "animationButton")

				IF animButton = 0 OR animButton = 1
					wpGUI_settings.animationButton = INIGET$("animation", "animationButton")
					IF wpGUI_settings.animationGlobal = 0
						wpGUI_settings.animationButton = 0
					ENDIF
				ENDIF

				// ===
				animButtonSpeed = INIGET$("animation", "animationButtonTimer")

				IF animButtonSpeed >= 0 AND animButtonSpeed <= 10
					wpGUI_settings.animationSpeedButton = INIGET$("animation", "animationButtonTimer")
				ENDIF

				// ===
				animDistanceButton = INIGET$("animation", "animationButtonDistance")

				IF animButtonSpeed > 0 AND animButtonSpeed <= 50
					wpGUI_settings.animationButtonDistance = INIGET$("animation", "animationButtonDistance")
				ENDIF



			INIOPEN ""

		ENDIF

	ENDIF

ENDFUNCTION

FUNCTION wpGUI_setAnimationSettings:

	//wpGUI_settings.animationButtonDistance = 10

	IF wpGUI_settings.animationGlobal = TRUE
		wpGUI_settings.animationButton = TRUE
	ENDIF

	IF wpGUI_settings.animationGlobal = FALSE
		wpGUI_settings.animationButton = FALSE
	ENDIF

ENDFUNCTION

FUNCTION wpGUI_setAnimationSpeedSettings:

	wpGUI_settings.animationSpeed = 0.2
	wpGUI_settings.animationSpeedButton = 		wpGUI_settings.animationSpeed

ENDFUNCTION

FUNCTION wpGUI_setInitialColor:
//	wpGUI_color.buttonInactive.r = 			60
//	wpGUI_color.buttonInactive.g = 			125
//	wpGUI_color.buttonInactive.b = 			139

	wpGUI_color.buttonInactive.r = 			40
	wpGUI_color.buttonInactive.g = 			40
	wpGUI_color.buttonInactive.b = 			40

	wpGUI_color.buttonActive.r = 			69
	wpGUI_color.buttonActive.g = 			90
	wpGUI_color.buttonActive.b = 			100

	wpGUI_color.buttonPress.r = 			100
	wpGUI_color.buttonPress.g = 			130
	wpGUI_color.buttonPress.b = 			144

	wpGUI_color.label.r =					69
	wpGUI_color.label.g =					90
	wpGUI_color.label.b =					100

	wpGUI_color.background.r =				32
	wpGUI_color.background.g =				32
	wpGUI_color.background.b =				32

	wpGUI_color.radioInactive.r = 			32
	wpGUI_color.radioInactive.g = 			32
	wpGUI_color.radioInactive.b = 			32

	wpGUI_color.radioActive.r = 			69
	wpGUI_color.radioActive.g = 			90
	wpGUI_color.radioActive.b = 			100

	wpGUI_color.radioPress.r = 				60 * 1.5
	wpGUI_color.radioPress.g = 				125 * 1.5
	wpGUI_color.radioPress.b = 				139 * 1.5

	wpGUI_color.cuttingLine.r =				128
	wpGUI_color.cuttingLine.g =				128
	wpGUI_color.cuttingLine.b =				128

ENDFUNCTION

FUNCTION wpGUI_setMouseInfos: positionX, positionY, buttonLeft, buttonRight, buttonLeft_press, buttonRight_press

	wpGUI_mouse.position.x = 		positionX
	wpGUI_mouse.position.y = 		positionY
	wpGUI_mouse.buttonLeft = 		buttonLeft
	wpGUI_mouse.buttonRight = 		buttonRight
	wpGUI_mouse.buttonLeft_press =	buttonLeft_press
	wpGUI_mouse.buttonRight_press = buttonRight_press

ENDFUNCTION

FUNCTION wpGUI_addBackground: positionX, positionY, sizeX, sizeY
LOCAL g AS wpGUI_TYPE

	g.typ =						0
	g.active =					TRUE
	g.background.position.x =	positionX
	g.background.position.y =	positionY
	g.background.size.width =	sizeX
	g.background.size.height =	sizeY

	DIMPUSH wpGUI[], g

ENDFUNCTION

FUNCTION wpGUI_addButton: name$, text$, returnCode$, positionX, positionY, sizeX, sizeY, textAlignment = 0, font = -1
LOCAL g AS wpGUI_TYPE, textLength, fontX, fontY

		wpGUI_check_init()

		IF wpGUI_checkName(name$) = FALSE

			g.typ =						1
			g.active =					TRUE
			g.name$ =					name$
			g.button.text$ = 			text$
			g.button.position.x =		positionX
			g.button.position.y =		positionY
			g.button.size.width =		sizeX
			g.button.size.height =		sizeY
			g.button.textAlignment =	textAlignment

			GETFONTSIZE fontX, fontY

			SELECT textAlignment
			CASE 0
				//g.button.textPosition.x = positionX + wpGUI_settings.animationButtonDistance + 5

				g.button.textPosition.x = wpGUI_getTextPositionX(0, positionX, sizeX, text$)
				g.button.textPosition.y = wpGUI_getTextPositionY(0, positionY, sizeY)
			CASE 1
				g.button.textPosition.x = wpGUI_getTextPositionX(1, positionX, sizeX, text$)
				g.button.textPosition.y = wpGUI_getTextPositionY(0, positionY, sizeY)
			CASE 2
				g.button.textPosition.x = wpGUI_getTextPositionX(2, positionX, sizeX, text$)
				g.button.textPosition.y = wpGUI_getTextPositionY(0, positionY, sizeY)
			ENDSELECT



			g.button.returnCode$ =		"button|" + returnCode$
			g.button.font =				font

			DIMPUSH wpGUI[], g

		ENDIF

ENDFUNCTION

FUNCTION wpGUI_addRadio: name$, text$, groupID, activeID, positionX, positionY, sizeX, sizeY, textAlignment = 0, font = -1
LOCAL g AS wpGUI_TYPE, fontX, fontY, gID, groupIDfound, helper AS wpGUI_radioHelper_TYPE

	wpGUI_check_init()

	IF wpGUI_checkName(name$) = FALSE

		g.typ =						3
		g.active =					TRUE
		g.name$ =					name$
		g.radio.text$ =				text$
		g.radio.textAlignment =	textAlignment
		g.radio.position.x =		positionX
		g.radio.position.y =		positionY
		g.radio.size.width =		sizeX
		g.radio.size.height =		sizeY

		g.radio.groupID = 			groupID
		g.radio.activeID =			activeID

		GETFONTSIZE fontX, fontY

		IF LEN(wpGUI_radioHelper[]) > 0
			// bereits vorhanden
			groupIDfound = FALSE

			FOREACH h IN wpGUI_radioHelper[]
				IF h.groupID = groupID
					groupIDfound = TRUE
					IF h.activeID <> activeID
						h.activeID = activeID
					ENDIF
				ENDIF
			NEXT

			IF groupIDfound = FALSE
				helper.groupID =		groupID
				helper.activeID = 		activeID
				helper.groupCounter = 	0

				DIMPUSH wpGUI_radioHelper[], helper
			ENDIF

		ELSE
			helper.groupID =	groupID
			helper.activeID = 	activeID
			helper.groupCounter = 	0

			DIMPUSH wpGUI_radioHelper[], helper
		ENDIF

		FOREACH h IN wpGUI_radioHelper[]
			IF h.groupID = groupID
				INC h.groupCounter, 1
				g.radio.autoCounter = h.groupCounter
			ENDIF

		NEXT



		SELECT textAlignment
		CASE 0
			//g.button.textPosition.x = positionX + wpGUI_settings.animationButtonDistance + 5

			g.radio.textPosition.x = wpGUI_getTextPositionX(0, positionX, sizeX, text$, 10)
			g.radio.textPosition.y = wpGUI_getTextPositionY(0, positionY, sizeY)
		CASE 1
			g.radio.textPosition.x = wpGUI_getTextPositionX(1, positionX + sizeY - 4, sizeX, text$, -10)
			g.radio.textPosition.y = wpGUI_getTextPositionY(0, positionY, sizeY)
		CASE 2
			g.radio.textPosition.x = wpGUI_getTextPositionX(2, positionX + sizeY - 4, sizeX, text$, 10)
			g.radio.textPosition.y = wpGUI_getTextPositionY(0, positionY, sizeY)
		ENDSELECT

		DIMPUSH wpGUI[], g

	ENDIF




//TYPE wpGUI_radio_TYPE
//	text$
//	textAlignment
//	textPosition AS wpGUI_position_TYPE
//	position AS 	wpGUI_position_TYPE
//	size AS 		wpGUI_size_TYPE
//	groupID
//	id
//ENDTYPE
//
//TYPE wpGUI_radioHelper_TYPE
//	groupIDcounter
//	groupIDactive
//ENDTYPE

ENDFUNCTION

FUNCTION wpGUI_checkName: name$
LOCAL found = FALSE

	FOREACH g IN wpGUI[]

		IF g.name$ = name$
			found = TRUE
		ENDIF

	NEXT

	RETURN found

ENDFUNCTION

FUNCTION wpGUI_addLabel: name$, text$, positionX, positionY, sizeX, sizeY, font = -1
LOCAL g AS wpGUI_TYPE

	wpGUI_check_init()

	IF wpGUI_checkName(name$) = FALSE

		g.typ = 					2
		g.active =					TRUE
		g.name$ = 					name$
		g.label.text$ =				text$
		g.label.textAlignment =		1
		g.label.font =				font
		g.label.position.x =		positionX
		g.label.position.y =		positionY
		g.label.size.width =		sizeX
		g.label.size.height =		sizeY
		g.label.textPosition.x = 	wpGUI_getTextPositionX(1, positionX, sizeX, text$)
		g.label.textPosition.y = 	wpGUI_getTextPositionY(0, positionY, sizeY)

		DIMPUSH wpGUI[], g
	ENDIF


ENDFUNCTION

FUNCTION wpGUI_addCuttingLine: positionX, positionY, sizeX
LOCAL g AS wpGUI_TYPE

	g.typ =							4
	g.active =						TRUE
	g.cuttingLine.position.x =		positionX
	g.cuttingLine.position.y =		positionY
	g.cuttingLine.size.width =		sizeX
	g.cuttingLine.size.height =		0

	DIMPUSH wpGUI[], g

ENDFUNCTION

FUNCTION wpGUI_getTextPositionX: textAlignment, positionX, sizeX, text$, offsetX=0
LOCAL pos, fontSizeX, fontSizeY, textLength

	GETFONTSIZE fontSizeX, fontSizeY

	textLength = LEN(text$)

	SELECT textAlignment
	CASE 0
		pos = positionX + wpGUI_settings.animationButtonDistance + 5 + offsetX
		RETURN pos
	CASE 1
		pos = positionX + ((sizeX - (textLength * fontSizeX)) / 2) + offsetX
		RETURN pos
	CASE 2
		pos = positionX + sizeX - wpGUI_settings.animationButtonDistance - (textLength * fontSizeX) - 5 - offsetX
		RETURN pos
	ENDSELECT



ENDFUNCTION

FUNCTION wpGUI_getTextPositionY: textAlignment, positionY, sizeY
LOCAL pos, fontSizeX, fontSizeY

	GETFONTSIZE fontSizeX, fontSizeY

	pos = positionY + ((sizeY - fontSizeY) / 2)

	RETURN pos

ENDFUNCTION

FUNCTION wpGUI_getRadioGroupActive: groupID

	FOREACH g IN wpGUI[]
		IF g.typ = 3
			IF g.radio.groupID = groupID
				RETURN g.radio.activeID
				BREAK
			ENDIF
		ENDIF
	NEXT

ENDFUNCTION

FUNCTION wpGUI_drawBackground: guiIndex
LOCAL positionX, positionY, width, height

	positionX =		wpGUI[guiIndex].background.position.x
	positionY =		wpGUI[guiIndex].background.position.y
	width =			wpGUI[guiIndex].background.size.width
	height =		wpGUI[guiIndex].background.size.height

	IF wpGUI[guiIndex].active = TRUE

		DRAWRECT positionX, positionY, width, height, RGB(wpGUI_color.background.r, wpGUI_color.background.g, wpGUI_color.background.b)
		wpGUI_drawBorder(positionX, positionY, width, height)

	ENDIF

ENDFUNCTION

FUNCTION wpGUI_drawBorder: positionX, positionY, width, height

	DRAWLINE positionX, positionY, positionX + width, positionY, RGB(255, 255, 255)
	DRAWLINE positionX, positionY, positionX, positionY + height, RGB(255, 255, 255)
	DRAWLINE positionX, positionY + height, positionX + width, positionY + height, RGB(255, 255, 255)
	DRAWLINE positionX + width, positionY, positionX + width, positionY + height, RGB(255, 255, 255)

ENDFUNCTION

FUNCTION wpGUI_drawButton: guiIndex
LOCAL positionX, positionY, width, height

	IF wpGUI_settings.animationButton = FALSE
		wpGUI[guiIndex].button.mouseOverOffset = wpGUI_settings.animationButtonDistance
	ENDIF


	positionX =		wpGUI[guiIndex].button.position.x + wpGUI_settings.animationButtonDistance - wpGUI[guiIndex].button.mouseOverOffset
	positionY =		wpGUI[guiIndex].button.position.y
	width =			wpGUI[guiIndex].button.size.width - (wpGUI_settings.animationButtonDistance * 2) + (wpGUI[guiIndex].button.mouseOverOffset * 2)
	height =		wpGUI[guiIndex].button.size.height

	IF wpGUI[guiIndex].active = TRUE

		IF wpGUI_mouse.position.x >= positionX AND wpGUI_mouse.position.x <= positionX + width AND wpGUI_mouse.position.y >= positionY AND wpGUI_mouse.position.y <= positionY + height

			IF wpGUI_settings.animationButton = TRUE
				INC wpGUI[guiIndex].button.mouseOverOffset, wpGUI_settings.animationSpeedButton * GETTIMER()
				IF wpGUI[guiIndex].button.mouseOverOffset > wpGUI_settings.animationButtonDistance THEN wpGUI[guiIndex].button.mouseOverOffset = wpGUI_settings.animationButtonDistance
			ENDIF

			IF wpGUI_mouse.buttonLeft_press = TRUE
				wpGUI_drawRRect(positionX, positionY, width, height, 1, 2)
			ELSE
				wpGUI_drawRRect(positionX, positionY, width, height, 1, 1)
			ENDIF

			IF wpGUI_mouse.buttonLeft = TRUE
				wpGUI_settings.returnCode$ = wpGUI[guiIndex].button.returnCode$
			ENDIF

		ELSE
			IF wpGUI_settings.animationButton = TRUE
				DEC wpGUI[guiIndex].button.mouseOverOffset, wpGUI_settings.animationSpeedButton * GETTIMER()
				IF wpGUI[guiIndex].button.mouseOverOffset < 0 THEN wpGUI[guiIndex].button.mouseOverOffset = 0
			ENDIF

			wpGUI_drawRRect(positionX, positionY, width, height, 1, 0)
		ENDIF

		PRINT wpGUI[guiIndex].button.text$, wpGUI[guiIndex].button.textPosition.x, wpGUI[guiIndex].button.textPosition.y

	ENDIF
	IF wpGUI[guiIndex].active = FALSE
		//wpGUI[guiIndex].button.mouseOverOffset = wpGUI_settings.animationButtonDistance
		wpGUI[guiIndex].button.mouseOverOffset = 0
	ENDIF

	//DRAWRECT wpGUI[guiIndex].button.position.x, wpGUI[guiIndex].button.position.y, wpGUI[guiIndex].button.size.width, wpGUI[guiIndex].button.size.height, RGB(255, 255, 255)

ENDFUNCTION

FUNCTION wpGUI_drawLabel: guiIndex
LOCAL positionX, positionY, width, height

	positionX =		wpGUI[guiIndex].label.position.x
	positionY =		wpGUI[guiIndex].label.position.y
	width =			wpGUI[guiIndex].label.size.width
	height =		wpGUI[guiIndex].label.size.height

	IF wpGUI[guiIndex].active = TRUE

		DRAWRECT positionX, positionY, width, height, RGB(wpGUI_color.label.r, wpGUI_color.label.g, wpGUI_color.label.b)
		PRINT  wpGUI[guiIndex].label.text$, wpGUI[guiIndex].label.textPosition.x, wpGUI[guiIndex].label.textPosition.y

	ENDIF

ENDFUNCTION

FUNCTION wpGUI_drawRadio: guiIndex
LOCAL positionX, positionY, width, height

	positionX =		wpGUI[guiIndex].radio.position.x
	positionY =		wpGUI[guiIndex].radio.position.y
	width =			wpGUI[guiIndex].radio.size.width
	height =		wpGUI[guiIndex].radio.size.height

	IF wpGUI[guiIndex].active = TRUE

		IF BOXCOLL(positionX, positionY, width, height, wpGUI_mouse.position.x, wpGUI_mouse.position.y, 0, 0) = TRUE
			IF wpGUI_mouse.buttonLeft_press = TRUE
				DRAWRECT positionX, positionY, width, height, RGB(wpGUI_color.radioPress.r, wpGUI_color.radioPress.g, wpGUI_color.radioPress.b)

				FOREACH g IN wpGUI[]
					IF g.typ = 3
						IF g.radio.groupID = wpGUI[guiIndex].radio.groupID
							g.radio.activeID = wpGUI[guiIndex].radio.autoCounter
						ENDIF
					ENDIF
				NEXT

			ELSE
				DRAWRECT positionX, positionY, width, height, RGB(wpGUI_color.radioActive.r, wpGUI_color.radioActive.g, wpGUI_color.radioActive.b)
			ENDIF

		ELSE
			DRAWRECT positionX, positionY, width, height, RGB(wpGUI_color.radioInactive.r, wpGUI_color.radioInactive.g, wpGUI_color.radioInactive.b)
		ENDIF

		IF wpGUI[guiIndex].radio.autoCounter = wpGUI[guiIndex].radio.activeID
			DRAWRECT positionX + 2, positionY + 2, height - 4, height - 4, RGB(255, 0, 0)
		ENDIF

		PRINT wpGUI[guiIndex].radio.text$, wpGUI[guiIndex].radio.textPosition.x, wpGUI[guiIndex].radio.textPosition.y

	ENDIF


ENDFUNCTION

FUNCTION wpGUI_drawCuttingLine: guiIndex

	IF wpGUI[guiIndex].active = TRUE
		DRAWLINE wpGUI[guiIndex].cuttingLine.position.x, wpGUI[guiIndex].cuttingLine.position.y, wpGUI[guiIndex].cuttingLine.position.x + wpGUI[guiIndex].cuttingLine.size.width, wpGUI[guiIndex].cuttingLine.position.y, RGB(wpGUI_color.cuttingLine.r, wpGUI_color.cuttingLine.g, wpGUI_color.cuttingLine.b)
	ENDIF

ENDFUNCTION

FUNCTION wpGUI_updateLabelText: name$, text$

	FOREACH g IN wpGUI[]
		IF g.name$ = name$

			SELECT g.label.textAlignment
			CASE 0
				g.label.textPosition.x = wpGUI_getTextPositionX(0, g.label.position.x, g.label.size.width, text$)
				g.label.textPosition.y = wpGUI_getTextPositionY(0, g.label.position.y, g.label.size.height)
			CASE 1
				g.label.textPosition.x = wpGUI_getTextPositionX(1, g.label.position.x, g.label.size.width, text$)
				g.label.textPosition.y = wpGUI_getTextPositionY(0, g.label.position.y, g.label.size.height)
			CASE 2
				g.label.textPosition.x = wpGUI_getTextPositionX(2, g.label.position.x, g.label.size.width, text$)
				g.label.textPosition.y = wpGUI_getTextPositionY(0, g.label.position.y, g.label.size.height)
			ENDSELECT

			g.label.text$ = text$
		ENDIF
	NEXT

ENDFUNCTION

FUNCTION wpGUI_updateButtonText: name$, text$

	FOREACH g IN wpGUI[]
		IF g.name$ = name$

			SELECT g.button.textAlignment
			CASE 0
				g.button.textPosition.x = wpGUI_getTextPositionX(0, g.button.position.x, g.button.size.width, text$)
				g.button.textPosition.y = wpGUI_getTextPositionY(0, g.button.position.y, g.button.size.height)
			CASE 1
				g.button.textPosition.x = wpGUI_getTextPositionX(1, g.button.position.x, g.button.size.width, text$)
				g.button.textPosition.y = wpGUI_getTextPositionY(0, g.button.position.y, g.button.size.height)
			CASE 2
				g.button.textPosition.x = wpGUI_getTextPositionX(2, g.button.position.x, g.button.size.width, text$)
				g.button.textPosition.y = wpGUI_getTextPositionY(0, g.button.position.y, g.button.size.height)
			ENDSELECT

			g.button.text$ = text$
		ENDIF
	NEXT

ENDFUNCTION

FUNCTION wpGUI_getReturnCode$:

	RETURN wpGUI_settings.returnCode$

ENDFUNCTION

FUNCTION wpGUI_drawRRect: x, y, length, width, typ, mouseinfo
LOCAL colorR, colorG, colorB, tmpR, tmpG, tmpB
// typ =	Art des Elementes
// info =	Mouseover/Mousepress Information

	SELECT typ
	CASE  1
		SELECT mouseinfo
		// No Mouseover
		CASE 0
			colorR = wpGUI_color.buttonInactive.r
			colorG = wpGUI_color.buttonInactive.g
			colorB = wpGUI_color.buttonInactive.b
		// Mouseover
		CASE 1
			colorR = wpGUI_color.buttonActive.r
			colorG = wpGUI_color.buttonActive.g
			colorB = wpGUI_color.buttonActive.b
		// Mouse Press
		CASE 2
			colorR = wpGUI_color.buttonPress.r
			colorG = wpGUI_color.buttonPress.g
			colorB = wpGUI_color.buttonPress.b
		ENDSELECT

		IF colorR > 255 THEN colorR = 255
		IF colorG > 255 THEN colorG = 255
		IF colorB > 255 THEN colorB = 255

	CASE 1

	ENDSELECT



	wpGUI_RoundRectBorder(x, y, length, width, 5, 5, RGB(colorR, colorG, colorB), RGB(colorR, colorG, colorB), 0)
ENDFUNCTION

FUNCTION wpGUI_RoundRectBorder: x,y,w,h,r,border,col, col_border, shadow_offset
        IF shadow_offset
                //ALPHAMODE -.5
                wpGUI_RoundRect(x+shadow_offset,y+shadow_offset,w,h,r,RGB(0,0,0))
        ENDIF
        //ALPHAMODE 0
        wpGUI_RoundRect(x,y,w,h,r,col_border)
        wpGUI_RoundRect(x+border,y+border, w-2*border, h-2*border, r-border, col)
ENDFUNCTION



FUNCTION wpGUI_RoundRect: x,y,w,h,r,col
        // polyvector way of doing it:
        STARTPOLY -1
        wpGUI_RRCircle(x+r,  y+r,    90,180, r,col)
        wpGUI_RRCircle(x+r,  y+h-r, 180,270, r,col)
        wpGUI_RRCircle(x+w-r,y+h-r, 270,360, r,col)
        wpGUI_RRCircle(x+w-r,y+r,   360,450, r,col)

        ENDPOLY
ENDFUNCTION

FUNCTION wpGUI_RRCircle: x,y,phi1, phi2, r, col
LOCAL p
        FOR p=phi1 TO phi2+0.00001 STEP (phi2-phi1)/16
                POLYVECTOR x+COS(p)*r, y-SIN(p)*r, 0,0,col
        NEXT
ENDFUNCTION

FUNCTION wpGUI_deleteAll:

	FOREACH g IN wpGUI[]
		DELETE g
	NEXT

ENDFUNCTION

FUNCTION wpGUI_deleteElement: name$

	FOREACH g IN wpGUI[]
		IF g.name$ = name$
			DELETE g
			BREAK
		ENDIF
	NEXT

ENDFUNCTION

FUNCTION wpGUI_setElementActive: name$

	FOREACH g IN wpGUI[]
		IF g.name$ = name$
			g.active = TRUE
			BREAK
		ENDIF
	NEXT

ENDFUNCTION

FUNCTION wpGUI_setElementInactive: name$

	FOREACH g IN wpGUI[]
		IF g.name$ = name$
			g.active = FALSE
			BREAK
		ENDIF
	NEXT

ENDFUNCTION