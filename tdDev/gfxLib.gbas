// --------------------------------- //
// Project: tdDev
// Start: Wednesday, December 21, 2016
// IDE Version: 14.497


// SETCURRENTDIR("Media") // go to media files

TYPE TDictionaryItem
        name$
        value
ENDTYPE

TYPE TDictionary
        table[]         AS TDictionaryItem

        FUNCTION Clear:
                DIM self.table[0]
        ENDFUNCTION

        FUNCTION Add: name$, value
                // If 'name$' already exists, call 'Set' instead
                IF self.Exists(name$)
                        self.Set(name$, value)
                        RETURN
                ENDIF

                LOCAL item AS TDictionaryItem
                item.name$ = name$
                item.value = value
                DIMPUSH self.table[], item
        ENDFUNCTION

        FUNCTION Get: name$, defaultValue=-1
                LOCAL rv# = defaultValue

                FOREACH item IN self.table[]
                        IF item.name$ = name$
                                rv = item.value
                                BREAK
                        ENDIF
                NEXT

                RETURN rv
        ENDFUNCTION

        FUNCTION Set%: name$, value
                // If the 'name$' doesn't exist in the table, call 'Add' instead
                IF NOT self.Exists(name$)
                        self.Add(name$, value)
                        RETURN
                ENDIF

                FOREACH item IN self.table[]
                        IF item.name$ = name$
                                item.value = value
                                BREAK
                        ENDIF
                NEXT
        ENDFUNCTION

        FUNCTION Exists%: name$
                FOREACH item IN self.table[]
                        IF item.name$ = name$
                                RETURN TRUE
                        ENDIF
                NEXT
                RETURN FALSE
        ENDFUNCTION

ENDTYPE

TYPE gfxLib_TYPE

	spriteID
	identifier$

ENDTYPE




//GLOBAL gfxLib[] AS gfxLib_TYPE
GLOBAL gfxLib AS TDictionary



FUNCTION gfxLib_loadsprite: file$, identifier$
LOCAL fileFound, id

	fileFound = DOESFILEEXIST(file$)

	IF fileFound = TRUE

		id = GENSPRITE()

		LOADSPRITE file$, id

		IF gfxLib.Exists(identifier$) = FALSE

			gfxLib.Add(identifier$, id)

		ENDIF

	ENDIF

ENDFUNCTION

FUNCTION gfxLib_drawSprite: identifier$, positionX, positionY, rotation=0
LOCAL id, pos1, pos2

	id = gfxLib.Get(identifier$)





	ROTOSPRITE id, positionX, positionY, rotation


//	FOREACH g IN gfxLib[]
//
//		IF g.identifier$ = identifier$
//			//ROTOSPRITE g.spriteID, positionX, positionY, rotation
//
//			BREAK
//		ENDIF
//
//	NEXT

ENDFUNCTION

FUNCTION gitLib_drawSprite2: id, rot, posX, posY, sizeX, sizeY, picSizeX, picSizeY, colorR, colorG, colorB
LOCAL midX, midY, dist, d1x, d1y

	midX = posX + (sizeX / 2)
	midY = posY + (sizeY / 2)

	d1x = midX - posX
	d1y = midY - posY

	dist = SQR(d1x * d1x + d1y * d1y)

	STARTPOLY id
		POLYVECTOR midX + dist * (COS(rot + 225)), midY + dist * (SIN(rot + 225)),        0,        0, RGB(colorR, colorG, colorB)
		POLYVECTOR midX + dist * (COS(rot + 135)), midY + dist * (SIN(rot + 135)),        0, picSizeY, RGB(colorR, colorG, colorB)
		POLYVECTOR midX + dist * (COS(rot +  45)), midY + dist * (SIN(rot +  45)), picSizeX, picSizeY, RGB(colorR, colorG, colorB)
		POLYVECTOR midX + dist * (COS(rot -  45)), midY + dist * (SIN(rot -  45)), picSizeX,        0, RGB(colorR, colorG, colorB)
	ENDPOLY

ENDFUNCTION


FUNCTION gfxLib_fileLoader: file$, category$
LOCAL fileFound
LOCAL count, loop, loop$, loopName$, gfx$, gfxContent$[]

	fileFound = DOESFILEEXIST(file$)

	IF fileFound = TRUE

		INIOPEN file$

			count = INIGET$(category$, "count")

			FOR loop = 1 TO count
				loop$ = loop
				loopName$ = "gfx_" + loop$

				gfx$ = INIGET$(category$, loopName$)

				SPLITSTR(gfx$, gfxContent$[], "|")

				gfxLib_loadsprite(gfxContent$[0], gfxContent$[1])

			NEXT

		INIOPEN ""

	ENDIF

ENDFUNCTION

FUNCTION gfxLib_generateMapParts:

	gfxLib_generateMapPartsCombinator("sand_grass", gfxLib.Get("grass_0"), gfxLib.Get("sand_1"), gfxLib.Get("sand_2"), gfxLib.Get("sand_3"), gfxLib.Get("sand_4"), gfxLib.Get("sand_5"), gfxLib.Get("sand_6"), gfxLib.Get("sand_7"), gfxLib.Get("sand_8"), gfxLib.Get("sand_9"))

ENDFUNCTION

FUNCTION gfxLib_generateMapPartsCombinator: name$, groundID, t1, t2, t3, t4, t5, t6, t7, t8, t9
LOCAL tmp, tmp$, newName$

	FOR tmp = 0 TO 20
		tmp$ = tmp

		newName$ = name$ + "_" + tmp$
		//DEBUG newName$ + "\n"

		SELECT tmp
		CASE 0
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, t2, t3, t4, t5, t6, t7, t8, t9))
		CASE 1
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, -1, -1, -1, -1, -1, -1, -1, -1))
		CASE 2
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, t2, -1, -1, -1, -1, -1, -1, -1))
		CASE 3
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, -1, t3, -1, -1, -1, -1, -1, -1))
		CASE 4
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, -1, -1, t4, -1, -1, -1, -1, -1))
		CASE 5
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, -1, -1, -1, t5, -1, -1, -1, -1))
		CASE 6
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, t2, t3, -1, -1, -1, -1, -1, -1))
		CASE 7
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, -1, t3, t4, -1, -1, -1, -1, -1))
		CASE 8
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, -1, -1, t4, t5, -1, -1, -1, -1))
		CASE 9
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, t2, -1, -1, t5, -1, -1, -1, -1))
		CASE 10
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, t2, t3, -1, -1, t6, -1, -1, -1))
		CASE 11
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, t2, -1, t4, -1, -1, -1, -1, -1))
		CASE 12
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, -1, t3, -1, t5, -1, -1, -1, -1))
		CASE 13
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, t2, t3, t4, -1, -1, -1, -1, -1))
		CASE 14
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, -1, t3, t4, t5, -1, -1, -1, -1))
		CASE 15
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, t2, -1, t4, t5, -1, -1, -1, -1))
		CASE 16
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, t2, t3, -1, t5, -1, -1, -1, -1))
		CASE 17
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, t2, t3, t4, -1, t6, -1, -1, -1))
		CASE 18
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, -1, t3, t4, -1, -1, t7, -1, -1))
		CASE 19
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, t2, t3, t4, -1, -1, t7, -1, -1))
		CASE 20
			gfxLib.Set(newName$, gfxLib_generateMapPartsGenerator(groundID, t1, t2, t3, t4, -1, t6, t7, -1, -1))
		ENDSELECT


	NEXT


	//sandOnGrass
	//sandOnCement


	//gfxLib.Set("", gfxLib_generateMapPartsGenerator(groundID, t1, t2, t3, t4, t5, t6, t7, t8, t9))

ENDFUNCTION

FUNCTION gfxLib_generateMapPartsGenerator: groundID, t1, t2, t3, t4, t5, t6, t7, t8, t9
LOCAL id

	id = GENSPRITE()

	CREATESCREEN 0, id, 32, 32
	USESCREEN 0
		DRAWSPRITE groundID, 0, 0

		IF t1 > -1 THEN DRAWSPRITE t1, 0, 0
		IF t2 > -1 THEN DRAWSPRITE t2, 0, 0
		IF t3 > -1 THEN DRAWSPRITE t3, 0, 0
		IF t4 > -1 THEN DRAWSPRITE t4, 0, 0
		IF t5 > -1 THEN DRAWSPRITE t5, 0, 0
		IF t6 > -1 THEN DRAWSPRITE t6, 0, 0
		IF t7 > -1 THEN DRAWSPRITE t7, 0, 0
		IF t8 > -1 THEN DRAWSPRITE t8, 0, 0
		IF t9 > -1 THEN DRAWSPRITE t9, 0, 0

	USESCREEN -1

	RETURN id

ENDFUNCTION

