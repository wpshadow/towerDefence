// --------------------------------- //
// Project: tdDev
// Start: Tuesday, January 31, 2017
// IDE Version: 14.497


// SETCURRENTDIR("Media") // go to media files
//
TYPE mapLayer_TYPE
	//oldTyp[6]
	typ[6]
	layer[6] //spriteID
	layerRotation[6]
	binary[6]
ENDTYPE

TYPE mapSize_TYPE
	x
	y
ENDTYPE

TYPE map_TYPE

	tile[100][100] AS mapLayer_TYPE
	size AS mapSize_TYPE

	FUNCTION setMapSize: sizeX, sizeY
		self.size.x = sizeX
		self.size.y = sizeY
	ENDFUNCTION

	FUNCTION setTile: spriteID, positionX, positionY, layer, typ
		// 1	Gras
		// 2	Sand
		// 3	Beton
		self.tile[positionX][positionY].layer[layer] = spriteID
		self.tile[positionX][positionY].typ[layer] = typ

//	id
//	bin
//	sprite
//	rotation


	ENDFUNCTION

	FUNCTION getTile: positionX, positionY, layer

		RETURN self.tile[positionX][positionY].layer[layer]

	ENDFUNCTION

	FUNCTION getTyp: positionX, positionY, typ

		RETURN self.tile[positionX][positionY].typ[typ]

	ENDFUNCTION

	FUNCTION generateInitialMap:
	LOCAL tmpX, tmpY, tmpLayer

		FOR tmpY = 0 TO 99
			FOR tmpX = 0 TO 99
				FOR tmpLayer = 0 TO 5
					self.tile[tmpX][tmpY].layer[tmpLayer] = -1
				NEXT
			NEXT
		NEXT

	ENDFUNCTION

	FUNCTION checkSurroundings: positionX, positionY, layer, typ, clicked = FALSE, groundTyp = -1
	LOCAL t1, t2, t3, t4, t5, t6, t7, t8, changed, count, groundName$, typName$, idName$, countID$

		// typ
		// 1	grass
		// 2	sand


		IF self.tile[positionX][positionY - 1].typ[layer] = typ THEN t1 = 1
		IF self.tile[positionX + 1][positionY - 1].typ[layer] = typ THEN t2 = 2
		IF self.tile[positionX + 1][positionY].typ[layer] = typ THEN t3 = 4
		IF self.tile[positionX][positionY + 1].typ[layer + 1] = typ THEN t4 = 8
		IF self.tile[positionX][positionY + 1].typ[layer] = typ THEN t5 = 16
		IF self.tile[positionX - 1][positionY + 1].typ[layer] = typ THEN t6 = 32
		IF self.tile[positionX - 1][positionY].typ[layer] = typ THEN t7 = 64
		IF self.tile[positionX - 1][positionY - 1].typ[layer] = typ THEN t8 = 128

		INC count, t1 + t2 + t3 + t4 + t5 + t6 + t7 + t8

		IF groundTyp = -1
			groundTyp = self.tile[positionX][positionY].typ[layer]
		ENDIF
		//self.tile[positionX][positionY].oldTyp[layer] = self.tile[positionX][positionY].typ[layer]

		DEBUG "count: " + count + " binary: " + self.tile[positionX][positionY].binary[layer] + " groundType: " + groundTyp + " spriteID: " + map.getTile(positionX, positionY, 0) + "\n"

		changed = FALSE

		IF self.tile[positionX][positionY].binary[layer] <> count OR clicked = TRUE

//			self.calculateSurroundings(count, positionX, positionY, typ)

			IF groundTyp = 1 THEN groundName$ = "grass"
			IF groundTyp = 2 THEN groundName$ = "sand"

//			IF self.tile[positionX][positionY].oldTyp[layer] = 0

			IF typ = 1 THEN typName$ = "grass"
			IF typ = 2 THEN typName$ = "sand"

//			ENDIF
//			IF self.tile[positionX][positionY].oldTyp[layer] <> 0
//
//				IF self.tile[positionX][positionY].oldTyp[layer] = 1 THEN typName$ = "grass"
//				IF self.tile[positionX][positionY].oldTyp[layer] = 2 THEN typName$ = "sand"
//
//			ENDIF

			SELECT count
			CASE 0
				countID$ = "1"
			CASE 1
				countID$ = "2"
			CASE 2
				countID$ = "1"
			CASE 3
				countID$ = "2"
			CASE 4
				countID$ = "3"
			CASE 5
				countID$ = "6"
			CASE 6
				countID$ = "3"
			CASE 7
				countID$ = "10"
			CASE 8
				countID$ = "1"
			CASE 9
				countID$ = "2"
			CASE 10
				countID$ = "1"
			CASE 11
				countID$ = "2"
			CASE 12
				countID$ = "3"
			CASE 13
				countID$ = "6"
			CASE 14
				countID$ = "3"
			CASE 15
				countID$ = "10"				
			CASE 16
				countID$ = "4"
			CASE 32
				countID$ = "1"
			CASE 64
				countID$ = "5"
			CASE 128
				countID$ = "1"
			ENDSELECT

			idName$ = typName$ + "_" + groundName$ + "_" + countID$

			//DEBUG idName$ + "\n"

			map.setTile(gfxLib.Get(idName$), positionX, positionY, 0, 2)
			//self.tile[positionX][positionY].layer[layer] = gfxLib.Get(idName$)
			self.tile[positionX][positionY].binary[layer] = count

			//DEBUG gfxLib.Get(idName$)

			changed = TRUE



		ENDIF

		DEBUG "count: " + count + " binary: " + self.tile[positionX][positionY].binary[layer] + " SpriteName: " + idName$ + " spriteID: " + map.getTile(positionX, positionY, 0) + "\n"
		DEBUG "---" + "\n"

		IF changed = TRUE

			IF self.tile[positionX][positionY - 1].typ[layer] = typ
				self.checkSurroundings(positionX, positionY - 1, 0, 2, FALSE, groundTyp)
			ENDIF
			IF self.tile[positionX][positionY + 1].typ[layer] = typ
				self.checkSurroundings(positionX, positionY + 1, 0, 2, FALSE, groundTyp)
			ENDIF
			IF self.tile[positionX - 1][positionY].typ[layer] = typ
				self.checkSurroundings(positionX - 1, positionY, 0, 2, FALSE, groundTyp)
			ENDIF
			IF self.tile[positionX + 1][positionY].typ[layer] = typ
				self.checkSurroundings(positionX + 1, positionY, 0, 2, FALSE, groundTyp)
			ENDIF



//	IF changed = TRUE
//		IF map.entry[posX][posY - 1].id = typ
//			checkSurroundings(posX, posY - 1, 1)
//		ENDIF
//		IF map.entry[posX][posY + 1].id = typ
//			checkSurroundings(posX, posY + 1, 1)
//		ENDIF
//		IF map.entry[posX - 1][posY].id = typ
//			checkSurroundings(posX - 1, posY, 1)
//		ENDIF
//		IF map.entry[posX + 1][posY].id = typ
//			checkSurroundings(posX + 1, posY, 1)
//		ENDIF
//	ENDIF


			//self.checkSurroundings(positionX, positionY, 0, 2)
		ENDIF

	ENDFUNCTION

	FUNCTION calculateSurroundings: id, positionX, positionY, typ

		SELECT id
		CASE 0
			//self.setMap(positionX, positionY,
		ENDSELECT

	ENDFUNCTION

	FUNCTION setMap: positionX, positionY, typ, layer, layerRotation, binary
	LOCAL phi

		SELECT layerRotation
		CASE 0
			phi = 0
		CASE 1
			phi = 90
		CASE 2
			phi = 180
		CASE 3
			phi = 270
		ENDSELECT

		self.tile[positionX][positionY].binary[layer] = binary
		self.tile[positionX][positionY].layer[layer] = layer
		self.tile[positionX][positionY].layerRotation[layer] = phi
		self.tile[positionX][positionY].typ[layer] = typ

	ENDFUNCTION

ENDTYPE

TYPE mapSprite
	grass[]
	sand[]
ENDTYPE

GLOBAL map AS map_TYPE

